package notification_test

import (
	"encoding/json"
	"fmt"
	"log"
	"net"
	"net/http"
	"testing"

	"github.com/flanksource/commons/logger"
	"github.com/flanksource/duty/context"
	"github.com/flanksource/duty/tests/setup"
	"github.com/flanksource/incident-commander/api"
	"github.com/flanksource/incident-commander/events"
	ginkgo "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
)

func TestNotifications(t *testing.T) {
	RegisterFailHandler(ginkgo.Fail)
	ginkgo.RunSpecs(t, "Notification")
}

var (
	DefaultContext context.Context
)

var _ = ginkgo.BeforeSuite(func() {
	DefaultContext = setup.BeforeSuiteFn()
	_ = context.UpdateProperty(DefaultContext, api.PropertyIncidentsDisabled, "true")
	_ = context.UpdateProperty(DefaultContext, "notification.send.trace", "true")
	events.StartConsumers(DefaultContext)
	setupWebhookServer()
})
var _ = ginkgo.AfterSuite(func() {
	// setup.DumpEventQueue(DefaultContext)
	setup.AfterSuiteFn()
	if err := webhookServer.Close(); err != nil {
		logger.Errorf("Fail to close webhook server: %v", err)
	}
})

var (
	webhookServer   *http.Server
	webhookEndpoint string            // the autogenerated endpoint for our webhook
	webhookPostdata map[string]string // JSON message sent by shoutrrr to our webhook
)

func setupWebhookServer() {
	listener, err := net.Listen("tcp", ":0") // will assign a random port
	if err != nil {
		ginkgo.Fail(err.Error())
	}

	if addr, ok := listener.Addr().(*net.TCPAddr); ok {
		webhookEndpoint = fmt.Sprintf("http://localhost:%d/webhook", addr.Port)
	} else {
		ginkgo.Fail("unexpected error: failed to parse port.")
	}

	mux := http.NewServeMux()
	mux.HandleFunc("/webhook", func(w http.ResponseWriter, r *http.Request) {
		logger.Infof("Received webhook")
		defer r.Body.Close()

		if err := json.NewDecoder(r.Body).Decode(&webhookPostdata); err != nil {
			logger.Errorf("failed to unmarshall: %v", err)
			w.WriteHeader(http.StatusBadRequest)
			return
		}

		w.WriteHeader(http.StatusOK)
	})

	webhookServer = &http.Server{
		Handler: mux,
	}

	go func() {
		defer ginkgo.GinkgoRecover() // Required by ginkgo, if an assertion is made in a goroutine.

		log.Printf("Starting webhookServer on %s", listener.Addr().String())
		if err := webhookServer.Serve(listener); err != nil {
			if err == http.ErrServerClosed {
				logger.Infof("Server closed")
			} else {
				ginkgo.Fail(fmt.Sprintf("Failed to start test server: %v", err))
			}
		}
	}()
}
