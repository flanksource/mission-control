{{- if .Values.db.secretKeyRef.create  }}
  {{- $secretObj := ( lookup "v1" "Secret" .Release.Namespace .Values.db.secretKeyRef.name ) | default dict}}
  {{- $secretData := ( get $secretObj "stringData" ) | default dict }}
  {{- $user :=  (( get $secretData "POSTGRES_USER" ) | b64dec ) | default "postgres"  }}
  {{ $password := "" }}
  {{- if .Release.IsInstall }}
  {{- $password =  (( get $secretData "POSTGRES_PASSWORD") | b64dec ) | default ( randAlphaNum 32 )  }}
  {{ else }}
  {{- $password = (index ((lookup "v1" "Secret" .Release.Namespace .Values.db.secretKeyRef.name).data | default dict) "POSTGRES_PASSWORD") | default "" | b64dec }}
  {{ end }}
  {{- $host := print "postgres." .Release.Namespace  ".svc.cluster.local" }}

{{- $kratosSecret := ((lookup "v1" "Secret" .Release.Namespace (include "kratos-im.secretname" .)).data | default dict) -}}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.db.secretKeyRef.name }}
type: Opaque
stringData:
  POSTGRES_USER: {{ $user | quote }}
  POSTGRES_PASSWORD: {{ $password | quote }}
  POSTGRES_HOST: {{ $host | quote }}
  DB_URL:  {{ (print "postgres://" $user ":" $password "@" $host "/incident_commander") | quote }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "kratos-im.secretname" . }}
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  dsn: {{ (print "postgres://" $user ":" $password "@" $host "/incident_commander") | b64enc | quote }}
  # Generate a random secret if the user doesn't give one. User given secret has priority
  secretsDefault: {{ ( include "kratos-im.secrets.default" . | default ((get $kratosSecret "secretsDefault") | b64dec) | default ( randAlphaNum 32 )) | required "Value kratos.config.secrets.default can not be empty!" | b64enc | quote }}
  secretsCookie: {{ ( include "kratos-im.secrets.cookie" . | default ((get $kratosSecret "secretsCookie") | b64dec) | default (randAlphaNum 32) ) | required "Value kratos.config.secrets.cookie can not be empty!" | b64enc | quote }}
  secretsCipher: {{ ( include "kratos-im.secrets.cipher" . | default ((get $kratosSecret "secretsCipher") | b64dec) | default ( randAlphaNum 32 )) | required "Value kratos.config.secrets.cipher can not be empty!" | b64enc | quote }}
  {{- if .Values.kratos.kratos.config.courier.smtp.connection_uri }}
  smtpConnectionURI: {{ .Values.kratos.kratos.config.courier.smtp.connection_uri | b64enc | quote }}
  {{- end }}

{{- end }}
